classdef (Abstract) MassiveBodyInterface
    %MASSIVEBODYINTERFACE this is the interface for all massive bodys
    % Every massive body class must inherit from this Interface. The basic
    % dynamic properties that describe the state of motion of a MassiveBody
    % are the center-of-mass position and the center-of-mass velocity.
    % Further dynamics properties may be added if needed (like angle,
    % angular velocity or internal state information)
    
    properties (Abstract, SetAccess = protected)
        posX double %center-of-mass x-coordinate
        posY double %center-of-mass y-coordinate
        velX double %center-of-mass x-velocity
        velY double %center-of-mass y-coordinate
        mass double %total mass of the body
    end

    properties (Constant)
        G = 1 %gravitational constant
    end
    
    methods
        function obj = setPosition(obj, newPosX, newPosY)
            %SETPOSITION setter for center-of-mass position
            arguments
                obj (1,1) 
                newPosX (1,1) {mustBeNumeric,mustBeReal}
                newPosY (1,1) {mustBeNumeric,mustBeReal}
            end
            
            obj.posX = newPosX;
            obj.posY = newPosY;
        end

        function obj = setVelocity(obj, newVelX, newVelY)
            %SETPOSITION setter for center-of-mass velocity
            arguments
                obj (1,1) 
                newVelX (1,1) {mustBeNumeric,mustBeReal}
                newVelY (1,1) {mustBeNumeric,mustBeReal}
            end

            obj.velX = newVelX;
            obj.velY = newVelY;
        end
    end

    methods (Abstract)
        %setter for the mass; the exact implementation can vary depending
        %whether the body has internal structure
        obj = setMass(obj,newMass)

        %generates the force-density (force per mass, i.e. 
        %acceleration-field) generated by this body at a specific point in
        %space  
        [forceDensity] = getForceDensityGeneratedByBody(obj, posForceX, posForceY)

        %calculates the change of the dynamic properties of this
        %massiveBody in the time-interaval dT that occurs without the 
        %interaction of another body (e.g. change in position due to 
        %velocity)
        [deltaT] = calculateDeltaTself(obj, dT)

        %calculates the change of the dynamic properties of this
        %massiveBody due to the force generated by another massiveBody
        %applied for a time dT using the forwardEuler method
        [deltaT] = calculateDeltaTfromForceSource(obj, massivBodyFieldSource, dT)
        
        %the plus operators must be implemented for the object
        %with its corresponding Delta-class (i.e. data-container for 
        % dynamical property changes) and return an object of the
        %original MassiveBody class
        [objReturn] = plus(obj1, obj2)

        %a function that plots this massiveBody into the current figure
        plot(obj)
    end
end

